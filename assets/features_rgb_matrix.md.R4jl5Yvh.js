import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.DyMmIvSC.js";
const __pageData = JSON.parse('{"title":"RGB Matrix Lighting","description":"","frontmatter":{},"headers":[],"relativePath":"features/rgb_matrix.md","filePath":"features/rgb_matrix.md"}');
const _sfc_main = { name: "features/rgb_matrix.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="rgb-matrix-lighting" tabindex="-1">RGB Matrix Lighting <a class="header-anchor" href="#rgb-matrix-lighting" aria-label="Permalink to &quot;RGB Matrix Lighting {#rgb-matrix-lighting}&quot;">​</a></h1><p>This feature allows you to use RGB LED matrices driven by external drivers. It hooks into the RGBLIGHT system so you can use the same keycodes as RGBLIGHT to control it.</p><p>If you want to use single color LED&#39;s you should use the <a href="./led_matrix">LED Matrix Subsystem</a> instead.</p><h2 id="driver-configuration" tabindex="-1">Driver configuration <a class="header-anchor" href="#driver-configuration" aria-label="Permalink to &quot;Driver configuration {#driver-configuration}&quot;">​</a></h2><hr><h3 id="is31fl3731" tabindex="-1">IS31FL3731 <a class="header-anchor" href="#is31fl3731" aria-label="Permalink to &quot;IS31FL3731 {#is31fl3731}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with the I2C IS31FL3731 RGB controller. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = is31fl3731</span></span></code></pre></div><p>You can use between 1 and 4 IS31FL3731 IC&#39;s. Do not specify <code>DRIVER_ADDR_&lt;N&gt;</code> defines for IC&#39;s that are not present on your keyboard. You can define the following items in <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>IS31FL3731_I2C_TIMEOUT</code></td><td>(Optional) How long to wait for i2c messages, in milliseconds</td><td>100</td></tr><tr><td><code>IS31FL3731_I2C_PERSISTENCE</code></td><td>(Optional) Retry failed messages this many times</td><td>0</td></tr><tr><td><code>IS31FL3731_DEGHOST</code></td><td>(Optional) Set this define to enable de-ghosting by halving Vcc during blanking time</td><td></td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>IS31FL3731_I2C_ADDRESS_1</code></td><td>(Required) Address for the first RGB driver</td><td></td></tr><tr><td><code>IS31FL3731_I2C_ADDRESS_2</code></td><td>(Optional) Address for the second RGB driver</td><td></td></tr><tr><td><code>IS31FL3731_I2C_ADDRESS_3</code></td><td>(Optional) Address for the third RGB driver</td><td></td></tr><tr><td><code>IS31FL3731_I2C_ADDRESS_4</code></td><td>(Optional) Address for the fourth RGB driver</td><td></td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is a 7-bit address, that gets left-shifted and bit 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set to 0 for write, 1 for read (as per I2C protocol)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The address will vary depending on your wiring:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 00 AD &lt;-&gt; GND</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 01 AD &lt;-&gt; SCL</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 AD &lt;-&gt; SDA</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11 AD &lt;-&gt; VCC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR represents A1:A0 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The result is: 0b11101(ADDR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3731_I2C_ADDRESS_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3731_I2C_ADDRESS_GND</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3731_I2C_ADDRESS_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3731_I2C_ADDRESS_SDA</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>For split keyboards using <code>RGB_MATRIX_SPLIT</code> with an LED driver, you can either have the same driver address or different driver addresses. If using different addresses, use <code>IS31FL3731_I2C_ADDRESS_1</code> for one and <code>IS31FL3731_I2C_ADDRESS_2</code> for the other one. Then, in <code>g_is31fl3731_leds</code>, fill out the correct driver index (0 or 1). If using one address, use <code>IS31FL3731_I2C_ADDRESS_1</code> for both, and use index 0 for <code>g_is31fl3731_leds</code>.</p><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> is31fl3731_led_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31fl3731_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[IS31FL3731_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Refer to IS31 manual for these locations</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |      G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |      |      B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |      |      | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, C1_3,  C2_3,  C3_3},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Where <code>Cx_y</code> is the location of the LED in the matrix defined by <a href="https://www.issi.com/WW/pdf/31FL3731.pdf" target="_blank" rel="noreferrer">the datasheet</a> and the header file <code>drivers/led/issi/is31fl3731.h</code>. The <code>driver</code> is the index of the driver you defined in your <code>config.h</code> (<code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code>).</p><hr><h3 id="is31fl3733" tabindex="-1">IS31FL3733 <a class="header-anchor" href="#is31fl3733" aria-label="Permalink to &quot;IS31FL3733 {#is31fl3733}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with the I2C IS31FL3733 RGB controller. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = is31fl3733</span></span></code></pre></div><p>You can use between 1 and 4 IS31FL3733 IC&#39;s. Do not specify <code>DRIVER_ADDR_&lt;N&gt;</code> defines for IC&#39;s that are not present on your keyboard. You can define the following items in <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>IS31FL3733_I2C_TIMEOUT</code></td><td>(Optional) How long to wait for i2c messages, in milliseconds</td><td>100</td></tr><tr><td><code>IS31FL3733_I2C_PERSISTENCE</code></td><td>(Optional) Retry failed messages this many times</td><td>0</td></tr><tr><td><code>IS31FL3733_PWM_FREQUENCY</code></td><td>(Optional) PWM Frequency Setting - IS31FL3733B only</td><td>0</td></tr><tr><td><code>IS31FL3733_GLOBALCURRENT</code></td><td>(Optional) Configuration for the Global Current Register</td><td>0xFF</td></tr><tr><td><code>IS31FL3733_SWPULLUP</code></td><td>(Optional) Set the value of the SWx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>IS31FL3733_CSPULLUP</code></td><td>(Optional) Set the value of the CSx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>IS31FL3733_I2C_ADDRESS_1</code></td><td>(Required) Address for the first RGB driver</td><td></td></tr><tr><td><code>IS31FL3733_I2C_ADDRESS_2</code></td><td>(Optional) Address for the second RGB driver</td><td></td></tr><tr><td><code>IS31FL3733_I2C_ADDRESS_3</code></td><td>(Optional) Address for the third RGB driver</td><td></td></tr><tr><td><code>IS31FL3733_I2C_ADDRESS_4</code></td><td>(Optional) Address for the fourth RGB driver</td><td></td></tr><tr><td><code>IS31FL3733_SYNC_1</code></td><td>(Optional) Sync configuration for the first RGB driver</td><td>0</td></tr><tr><td><code>IS31FL3733_SYNC_2</code></td><td>(Optional) Sync configuration for the second RGB driver</td><td>0</td></tr><tr><td><code>IS31FL3733_SYNC_3</code></td><td>(Optional) Sync configuration for the third RGB driver</td><td>0</td></tr><tr><td><code>IS31FL3733_SYNC_4</code></td><td>(Optional) Sync configuration for the fourth RGB driver</td><td>0</td></tr></tbody></table><p>The IS31FL3733 IC&#39;s have on-chip resistors that can be enabled to allow for de-ghosting of the RGB matrix. By default these resistors are not enabled (<code>IS31FL3733_SWPULLUP</code>/<code>IS31FL3733_CSPULLUP</code> are given the value of <code>IS31FL3733_PUR_0R</code>), the values that can be set to enable de-ghosting are as follows:</p><table><thead><tr><th><code>IS31FL3733_SWPULLUP/IS31FL3733_CSPULLUP</code></th><th>Description</th></tr></thead><tbody><tr><td><code>IS31FL3733_PUR_0R</code></td><td>(default) Do not use the on-chip resistors/enable de-ghosting</td></tr><tr><td><code>IS31FL3733_PUR_05KR</code></td><td>The 0.5k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3733_PUR_3KR</code></td><td>The 3k Ohm resistor used at all times</td></tr><tr><td><code>IS31FL3733_PUR_4KR</code></td><td>The 4k Ohm resistor used at all times</td></tr><tr><td><code>IS31FL3733_PUR_8KR</code></td><td>The 8k Ohm resistor used at all times</td></tr><tr><td><code>IS31FL3733_PUR_16KR</code></td><td>The 16k Ohm resistor used at all times</td></tr><tr><td><code>IS31FL3733_PUR_32KR</code></td><td>The 32k Ohm resistor used during blanking period (t_NOL)</td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is a 7-bit address, that gets left-shifted and bit 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set to 0 for write, 1 for read (as per I2C protocol)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The address will vary depending on your wiring:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 00 ADDRn &lt;-&gt; GND</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 01 ADDRn &lt;-&gt; SCL</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 ADDRn &lt;-&gt; SDA</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11 ADDRn &lt;-&gt; VCC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR1 represents A1:A0 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR2 represents A3:A2 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The result is: 0b101(ADDR2)(ADDR1)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3733_I2C_ADDRESS_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3733_I2C_ADDRESS_GND_GND</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3733_I2C_ADDRESS_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3733_I2C_ADDRESS_GND_VCC</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 58</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>Currently only 4 drivers are supported, but it would be trivial to support all 8 combinations.</p><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> is31fl3733_led_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31fl3733_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[IS31FL3733_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Refer to IS31 manual for these locations</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Where <code>SWx_CSy</code> is the location of the LED in the matrix defined by <a href="https://www.issi.com/WW/pdf/31FL3733.pdf" target="_blank" rel="noreferrer">the datasheet</a> and the header file <code>drivers/led/issi/is31fl3733.h</code>. The <code>driver</code> is the index of the driver you defined in your <code>config.h</code> (<code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code> for now).</p><hr><h3 id="is31fl3736" tabindex="-1">IS31FL3736 <a class="header-anchor" href="#is31fl3736" aria-label="Permalink to &quot;IS31FL3736 {#is31fl3736}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with the I2C IS31FL3736 RGB controller. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = is31fl3736</span></span></code></pre></div><p>You can use between 1 and 4 IS31FL3736 IC&#39;s. Do not specify <code>DRIVER_ADDR_&lt;N&gt;</code> defines for IC&#39;s that are not present on your keyboard.</p><p>Configure the hardware via your <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>IS31FL3736_I2C_TIMEOUT</code></td><td>(Optional) How long to wait for i2c messages, in milliseconds</td><td>100</td></tr><tr><td><code>IS31FL3736_PERSISTENCE</code></td><td>(Optional) Retry failed messages this many times</td><td>0</td></tr><tr><td><code>IS31FL3736_PWM_FREQUENCY</code></td><td>(Optional) PWM Frequency Setting - IS31FL3736B only</td><td>0</td></tr><tr><td><code>IS31FL3736_GLOBALCURRENT</code></td><td>(Optional) Configuration for the Global Current Register</td><td>0xFF</td></tr><tr><td><code>IS31FL3736_SWPULLUP</code></td><td>(Optional) Set the value of the SWx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>IS31FL3736_CSPULLUP</code></td><td>(Optional) Set the value of the CSx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>IS31FL3736_I2C_ADDRESS_1</code></td><td>(Required) Address for the first RGB driver</td><td></td></tr><tr><td><code>IS31FL3736_I2C_ADDRESS_2</code></td><td>(Optional) Address for the second RGB driver</td><td></td></tr><tr><td><code>IS31FL3736_I2C_ADDRESS_3</code></td><td>(Optional) Address for the third RGB driver</td><td></td></tr><tr><td><code>IS31FL3736_I2C_ADDRESS_4</code></td><td>(Optional) Address for the fourth RGB driver</td><td></td></tr></tbody></table><p>The IS31FL3736 IC&#39;s have on-chip resistors that can be enabled to allow for de-ghosting of the RGB matrix. By default these resistors are not enabled (<code>IS31FL3736_SWPULLUP</code>/<code>IS31FL3736_CSPULLUP</code> are given the value of <code>IS31FL3736_PUR_0R</code>), the values that can be set to enable de-ghosting are as follows:</p><table><thead><tr><th><code>IS31FL3736_SWPULLUP/IS31FL3736_CSPULLUP</code></th><th>Description</th></tr></thead><tbody><tr><td><code>IS31FL3736_PUR_0R</code></td><td>(default) Do not use the on-chip resistors/enable de-ghosting</td></tr><tr><td><code>IS31FL3736_PUR_05KR</code></td><td>The 0.5k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_1KR</code></td><td>The 1k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_2KR</code></td><td>The 2k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_4KR</code></td><td>The 4k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_8KR</code></td><td>The 8k Ohm resistor during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_16KR</code></td><td>The 16k Ohm resistor during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3736_PUR_32KR</code></td><td>The 32k Ohm resistor used during blanking period (t_NOL)</td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is a 7-bit address, that gets left-shifted and bit 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set to 0 for write, 1 for read (as per I2C protocol)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The address will vary depending on your wiring:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 00 ADDRn &lt;-&gt; GND</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 01 ADDRn &lt;-&gt; SCL</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 ADDRn &lt;-&gt; SDA</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11 ADDRn &lt;-&gt; VCC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR1 represents A1:A0 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR2 represents A3:A2 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The result is: 0b101(ADDR2)(ADDR1)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3736_I2C_ADDRESS_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3736_I2C_ADDRESS_GND_GND</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3736_I2C_ADDRESS_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3736_I2C_ADDRESS_GND_SCL</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> is31fl3736_led_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31fl3736_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[IS31FL3736_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Refer to IS31 manual for these locations</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="is31fl3737" tabindex="-1">IS31FL3737 <a class="header-anchor" href="#is31fl3737" aria-label="Permalink to &quot;IS31FL3737 {#is31fl3737}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with the I2C IS31FL3737 RGB controller. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = is31fl3737</span></span></code></pre></div><p>You can use between 1 and 4 IS31FL3737 IC&#39;s. Do not specify <code>DRIVER_ADDR_&lt;N&gt;</code> defines for IC&#39;s that are not present on your keyboard.</p><p>Configure the hardware via your <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>IS31FL3737_I2C_TIMEOUT</code></td><td>(Optional) How long to wait for i2c messages, in milliseconds</td><td>100</td></tr><tr><td><code>IS31FL3737_I2C_PERSISTENCE</code></td><td>(Optional) Retry failed messages this many times</td><td>0</td></tr><tr><td><code>IS31FL3737_PWM_FREQUENCY</code></td><td>(Optional) PWM Frequency Setting - IS31FL3737B only</td><td>0</td></tr><tr><td><code>IS31FL3737_GLOBALCURRENT</code></td><td>(Optional) Configuration for the Global Current Register</td><td>0xFF</td></tr><tr><td><code>IS31FL3737_SWPULLUP</code></td><td>(Optional) Set the value of the SWx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>IS31FL3737_CSPULLUP</code></td><td>(Optional) Set the value of the CSx lines on-chip de-ghosting resistors</td><td>PUR_0R (Disabled)</td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>IS31FL3737_I2C_ADDRESS_1</code></td><td>(Required) Address for the first RGB driver</td><td></td></tr><tr><td><code>IS31FL3737_I2C_ADDRESS_2</code></td><td>(Optional) Address for the second RGB driver</td><td></td></tr><tr><td><code>IS31FL3737_I2C_ADDRESS_3</code></td><td>(Optional) Address for the third RGB driver</td><td></td></tr><tr><td><code>IS31FL3737_I2C_ADDRESS_4</code></td><td>(Optional) Address for the fourth RGB driver</td><td></td></tr></tbody></table><p>The IS31FL3737 IC&#39;s have on-chip resistors that can be enabled to allow for de-ghosting of the RGB matrix. By default these resistors are not enabled (<code>IS31FL3737_SWPULLUP</code>/<code>IS31FL3737_CSPULLUP</code> are given the value of <code>IS31FL3737_PUR_0R</code>), the values that can be set to enable de-ghosting are as follows:</p><table><thead><tr><th><code>IS31FL3737_SWPULLUP/IS31FL3737_CSPULLUP</code></th><th>Description</th></tr></thead><tbody><tr><td><code>IS31FL3737_PUR_0R</code></td><td>(default) Do not use the on-chip resistors/enable de-ghosting</td></tr><tr><td><code>IS31FL3737_PUR_05KR</code></td><td>The 0.5k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_1KR</code></td><td>The 1k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_2KR</code></td><td>The 2k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_4KR</code></td><td>The 4k Ohm resistor used during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_8KR</code></td><td>The 8k Ohm resistor during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_16KR</code></td><td>The 16k Ohm resistor during blanking period (t_NOL)</td></tr><tr><td><code>IS31FL3737_PUR_32KR</code></td><td>The 32k Ohm resistor used during blanking period (t_NOL)</td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is a 7-bit address, that gets left-shifted and bit 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set to 0 for write, 1 for read (as per I2C protocol)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The address will vary depending on your wiring:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 ADDR &lt;-&gt; GND</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0101 ADDR &lt;-&gt; SCL</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1010 ADDR &lt;-&gt; SDA</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 ADDR &lt;-&gt; VCC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ADDR represents A3:A0 of the 7-bit address.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The result is: 0b101(ADDR)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3737_I2C_ADDRESS_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3737_I2C_ADDRESS_GND</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS31FL3737_I2C_ADDRESS_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IS31FL3737_I2C_ADDRESS_SCL</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 36</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> is31fl3737_led_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31fl3737_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[IS31FL3737_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Refer to IS31 manual for these locations</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Where <code>SWx_CSy</code> is the location of the LED in the matrix defined by <a href="https://www.issi.com/WW/pdf/31FL3737.pdf" target="_blank" rel="noreferrer">the datasheet</a> and the header file <code>drivers/led/issi/is31fl3737.h</code>. The <code>driver</code> is the index of the driver you defined in your <code>config.h</code> (Only <code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code> for now).</p><hr><h3 id="is31flcommon" tabindex="-1">IS31FLCOMMON <a class="header-anchor" href="#is31flcommon" aria-label="Permalink to &quot;IS31FLCOMMON {#is31flcommon}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with a selection of I2C ISSI Lumissil RGB controllers through a shared common driver. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = &lt;driver name&gt;</span></span></code></pre></div><p>Where <code>&lt;driver name&gt;</code> is the applicable LED driver chip as below</p><table><thead><tr><th>Driver Name</th><th>Data Sheet</th><th>Capability</th></tr></thead><tbody><tr><td><code>IS31FL3742A</code></td><td><a href="https://www.lumissil.com/assets/pdf/core/IS31FL3742A_DS.pdf" target="_blank" rel="noreferrer">datasheet</a></td><td>60 RGB, 30x6 Matrix</td></tr><tr><td><code>IS31FL3743A</code></td><td><a href="https://www.lumissil.com/assets/pdf/core/IS31FL3743A_DS.pdf" target="_blank" rel="noreferrer">datasheet</a></td><td>66 RGB, 18x11 Matrix</td></tr><tr><td><code>IS31FL3745</code></td><td><a href="https://www.lumissil.com/assets/pdf/core/IS31FL3745_DS.pdf" target="_blank" rel="noreferrer">datasheet</a></td><td>48 RGB, 18x8 Matrix</td></tr><tr><td><code>IS31FL3746A</code></td><td><a href="https://www.lumissil.com/assets/pdf/core/IS31FL3746A_DS.pdf" target="_blank" rel="noreferrer">datasheet</a></td><td>24 RGB, 18x4 Matrix</td></tr></tbody></table><p>You can use between 1 and 4 IC&#39;s. Do not specify <code>DRIVER_ADDR_&lt;N&gt;</code> define for IC&#39;s if not present on your keyboard. The <code>DRIVER_ADDR_1</code> default assumes that all Address pins on the controller have been connected to GND. Drivers that have SYNC functionality have the default settings to disable if 1 driver. If more than 1 drivers then <code>DRIVER_ADDR_1</code> will be set to Master and the remaining ones set to Slave.</p><p>Configure the hardware via your <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>ISSI_TIMEOUT</code></td><td>(Optional) How long to wait for i2c messages, in milliseconds</td><td>100</td></tr><tr><td><code>ISSI_PERSISTENCE</code></td><td>(Optional) Retry failed messages this many times</td><td>0</td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>DRIVER_ADDR_1</code></td><td>(Optional) Address for the first RGB driver</td><td></td></tr><tr><td><code>DRIVER_ADDR_&lt;N&gt;</code></td><td>(Required) Address for the additional RGB drivers</td><td></td></tr><tr><td><code>ISSI_SSR_&lt;N&gt;</code></td><td>(Optional) Configuration for the Spread Spectrum Register</td><td></td></tr><tr><td><code>ISSI_CONFIGURATION</code></td><td>(Optional) Configuration for the Configuration Register</td><td></td></tr><tr><td><code>ISSI_GLOBALCURRENT</code></td><td>(Optional) Configuration for the Global Current Register</td><td>0xFF</td></tr><tr><td><code>ISSI_PULLDOWNUP</code></td><td>(Optional) Configuration for the Pull Up &amp; Pull Down Register</td><td></td></tr><tr><td><code>ISSI_TEMP</code></td><td>(Optional) Configuration for the Temperature Register</td><td></td></tr><tr><td><code>ISSI_PWM_ENABLE</code></td><td>(Optional) Configuration for the PWM Enable Register</td><td></td></tr><tr><td><code>ISSI_PWM_SET</code></td><td>(Optional) Configuration for the PWM Setting Register</td><td></td></tr><tr><td><code>ISSI_SCAL_RED</code></td><td>(Optional) Configuration for the RED LEDs in Scaling Registers</td><td>0xFF</td></tr><tr><td><code>ISSI_SCAL_BLUE</code></td><td>(Optional) Configuration for the BLUE LEDs in Scaling Registers</td><td>0xFF</td></tr><tr><td><code>ISSI_SCAL_GREEN</code></td><td>(Optional) Configuration for the GREEN LEDs in Scaling Registers</td><td>0xFF</td></tr><tr><td><code>ISSI_MANUAL_SCALING</code></td><td>(Optional) If you wish to configure the Scaling Registers manually</td><td></td></tr></tbody></table><p>Defaults</p><table><thead><tr><th>Variable</th><th>IS31FL3742A</th><th>IS31FL3743A</th><th>IS31FL3745</th><th>IS31FL3746</th></tr></thead><tbody><tr><td><code>DRIVER_ADDR_1</code></td><td>0b0110000</td><td>0b0100000</td><td>0b0100000</td><td>0b1100000</td></tr><tr><td><code>ISSI_SSR_1</code></td><td>0x00</td><td>0x00 / 0x60</td><td>0x00 / 0xC0</td><td>0x00</td></tr><tr><td><code>ISSI_SSR_&lt;2-4&gt;</code></td><td>0x00</td><td>0x40</td><td>0x80</td><td>0x00</td></tr><tr><td><code>ISSI_CONFIGURATION</code></td><td>0x31</td><td>0x01</td><td>0x31</td><td>0x01</td></tr><tr><td><code>ISSI_PULLDOWNUP</code></td><td>0x55</td><td>0x33</td><td>0x33</td><td>0x33</td></tr><tr><td><code>ISSI_TEMP</code></td><td>N/A</td><td>0x00</td><td>0x00</td><td>0x00</td></tr><tr><td><code>ISSI_PWM_ENABLE</code></td><td>N/A</td><td>N/A</td><td>N/A</td><td>0x00</td></tr><tr><td><code>ISSI_PWM_SET</code></td><td>0x00</td><td>N/A</td><td>N/A</td><td>0x00</td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_ADDR_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0100001</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 66</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>Currently only 4 drivers are supported, but it would be trivial to support for more. Note that using a combination of different drivers is not supported. All drivers must be of the same model.</p><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is31_led PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[RGB_MATRIX_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Refer to IS31 manual for these locations</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |        |        | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Where <code>CSx_SWx</code> is the location of the LED in the matrix defined by the datasheet. The <code>driver</code> is the index of the driver you defined in your <code>config.h</code> (<code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code> for now).</p><p><code>ISSI_MANUAL_SCALING</code> is used to override the Scaling for individual LED&#39;s. By default they will be set as per <code>ISSI_SCAL_&lt;colour&gt;</code>. In <code>config.h</code> set how many LED&#39;s you want to manually set scaling for. Eg <code>#define ISSI_MANUAL_SCALING 3</code></p><p>Then Define the array listing all the LEDs you want to override in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is31_led PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_is31_scaling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ISSI_MANUAL_SCALING] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*   LED Index</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  R scaling</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |    G scaling</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |    |    B scaling</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *   |  |    |    | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">155</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">167</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">155</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">167</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Where LED Index is the position of the LED in the <code>g_is31_leds</code> array. The <code>scaling</code> value between 0 and 255 to be written to the Scaling Register.</p><hr><h3 id="ws2812" tabindex="-1">WS2812 <a class="header-anchor" href="#ws2812" aria-label="Permalink to &quot;WS2812 {#ws2812}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with a WS2811/WS2812{a,b,c} addressable LED strand. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = ws2812</span></span></code></pre></div><p>Configure the hardware via your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The pin connected to the data pin of the LEDs</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WS2812_DI_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D7</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The number of LEDs connected</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 70</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There are additional configuration options for ARM controllers that offer increased performance over the default bitbang driver. Please see <a href="./../drivers/ws2812">WS2812 Driver</a> for more information.</p></div><hr><h3 id="apa102" tabindex="-1">APA102 <a class="header-anchor" href="#apa102" aria-label="Permalink to &quot;APA102 {#apa102}&quot;">​</a></h3><p>There is basic support for APA102 based addressable LED strands. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = apa102</span></span></code></pre></div><p>Configure the hardware via your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The pin connected to the data pin of the LEDs</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APA102_DI_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D7</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The pin connected to the clock pin of the LEDs</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APA102_CI_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D6</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The number of LEDs connected</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 70</span></span></code></pre></div><hr><h3 id="aw20216s" tabindex="-1">AW20216S <a class="header-anchor" href="#aw20216s" aria-label="Permalink to &quot;AW20216S {#aw20216s}&quot;">​</a></h3><p>There is basic support for addressable RGB matrix lighting with the SPI AW20216S RGB controller. To enable it, add this to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RGB_MATRIX_DRIVER = aw20216s</span></span></code></pre></div><p>You can use up to 2 AW20216S IC&#39;s. Do not specify <code>DRIVER_&lt;N&gt;_xxx</code> defines for IC&#39;s that are not present on your keyboard. You can define the following items in <code>config.h</code>:</p><table><thead><tr><th>Variable</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>AW20216S_CS_PIN_1</code></td><td>(Required) MCU pin connected to first RGB driver chip select line</td><td>B13</td></tr><tr><td><code>AW20216S_CS_PIN_2</code></td><td>(Optional) MCU pin connected to second RGB driver chip select line</td><td></td></tr><tr><td><code>AW20216S_EN_PIN_1</code></td><td>(Required) MCU pin connected to first RGB driver hardware enable line</td><td>C13</td></tr><tr><td><code>AW20216S_EN_PIN_2</code></td><td>(Optional) MCU pin connected to second RGB driver hardware enable line</td><td></td></tr><tr><td><code>DRIVER_1_LED_TOTAL</code></td><td>(Required) How many RGB lights are connected to first RGB driver</td><td></td></tr><tr><td><code>DRIVER_2_LED_TOTAL</code></td><td>(Optional) How many RGB lights are connected to second RGB driver</td><td></td></tr><tr><td><code>RGB_MATRIX_LED_COUNT</code></td><td>(Required) How many RGB lights are present across all drivers</td><td></td></tr><tr><td><code>AW20216S_SCALING_MAX</code></td><td>(Optional) LED current scaling value (0-255, higher values mean LED is brighter at full PWM)</td><td>150</td></tr><tr><td><code>AW20216S_GLOBAL_CURRENT_MAX</code></td><td>(Optional) Driver global current limit (0-255, higher values means the driver may consume more power)</td><td>150</td></tr><tr><td><code>AW20216S_SPI_MODE</code></td><td>(Optional) Mode for SPI communication (0-3, defines polarity and phase of the clock)</td><td>3</td></tr><tr><td><code>AW20216S_SPI_DIVISOR</code></td><td>(Optional) Clock divisor for SPI communication (powers of 2, smaller numbers means faster communication, should not be less than 4)</td><td>4</td></tr></tbody></table><p>Here is an example using 2 drivers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AW20216S_CS_PIN_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B13</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AW20216S_CS_PIN_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B14</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hardware enable lines may be connected to the same pin</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AW20216S_EN_PIN_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> C13</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AW20216S_EN_PIN_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> C13</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_1_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 66</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRIVER_2_LED_TOTAL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (DRIVER_1_LED_TOTAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DRIVER_2_LED_TOTAL)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the parentheses, this is so when <code>RGB_MATRIX_LED_COUNT</code> is used in code and expanded, the values are added together before any additional math is applied to them. As an example, <code>rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL)</code> will give very different results than <code>rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL</code>.</p></div><p>Define these arrays listing all the LEDs in your <code>&lt;keyboard&gt;.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aw20216s_led_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGMEM </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g_aw20216s_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[AW20216S_LED_COUNT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Each AW20216S channel is controlled by a register at some offset between 0x00</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * and 0xD7 inclusive.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * See drivers/led/aw20216s.h for the mapping between register offsets and</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * driver pin locations.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *    driver</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *    |  R location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *    |  |        G location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *    |  |        |        B location</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *    |  |        |        | */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS4, SW1_CS5, SW1_CS6 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS7, SW1_CS8, SW1_CS9 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS10, SW1_CS11, SW1_CS12 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS13, SW1_CS14, SW1_CS15 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS1, SW1_CS2, SW1_CS3 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS13, SW1_CS14, SW1_CS15 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW1_CS16, SW1_CS17, SW1_CS18 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SW2_CS4, SW2_CS5, SW2_CS6 },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="common-configuration" tabindex="-1">Common Configuration <a class="header-anchor" href="#common-configuration" aria-label="Permalink to &quot;Common Configuration {#common-configuration}&quot;">​</a></h2><p>From this point forward the configuration is the same for all the drivers. The <code>led_config_t</code> struct provides a key electrical matrix to led index lookup table, what the physical position of each LED is on the board, and what type of key or usage the LED if the LED represents. Here is a brief example:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">led_config_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g_led_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Key Matrix to LED Index</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NO_LED, NO_LED,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { NO_LED, NO_LED, NO_LED, NO_LED },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NO_LED, NO_LED,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NO_LED, NO_LED,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LED Index to Physical Position</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">188</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">187</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">149</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">112</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, {  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">37</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, {  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LED Index to Flag</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} };</span></span></code></pre></div><p>The first part, <code>// Key Matrix to LED Index</code>, tells the system what key this LED represents by using the key&#39;s electrical matrix row &amp; col. The second part, <code>// LED Index to Physical Position</code> represents the LED&#39;s physical <code>{ x, y }</code> position on the keyboard. The default expected range of values for <code>{ x, y }</code> is the inclusive range <code>{ 0..224, 0..64 }</code>. This default expected range is due to effects that calculate the center of the keyboard for their animations. The easiest way to calculate these positions is imagine your keyboard is a grid, and the top left of the keyboard represents <code>{ x, y }</code> coordinate <code>{ 0, 0 }</code> and the bottom right of your keyboard represents <code>{ 224, 64 }</code>. Using this as a basis, you can use the following formula to calculate the physical position:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 224</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NUMBER_OF_COLS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COL_POSITION</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NUMBER_OF_ROWS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROW_POSITION</span></span></code></pre></div><p>Where NUMBER_OF_COLS, NUMBER_OF_ROWS, COL_POSITION, &amp; ROW_POSITION are all based on the physical layout of your keyboard, not the electrical layout.</p><p>As mentioned earlier, the center of the keyboard by default is expected to be <code>{ 112, 32 }</code>, but this can be changed if you want to more accurately calculate the LED&#39;s physical <code>{ x, y }</code> positions. Keyboard designers can implement <code>#define RGB_MATRIX_CENTER { 112, 32 }</code> in their config.h file with the new center point of the keyboard, or where they want it to be allowing more possibilities for the <code>{ x, y }</code> values. Do note that the maximum value for x or y is 255, and the recommended maximum is 224 as this gives animations runoff room before they reset.</p><p><code>// LED Index to Flag</code> is a bitmask, whether or not a certain LEDs is of a certain type. It is recommended that LEDs are set to only 1 type.</p><h2 id="flags" tabindex="-1">Flags <a class="header-anchor" href="#flags" aria-label="Permalink to &quot;Flags {#flags}&quot;">​</a></h2><table><thead><tr><th>Define</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>HAS_FLAGS(bits, flags)</code></td><td><em>n/a</em></td><td>Evaluates to <code>true</code> if <code>bits</code> has all <code>flags</code> set</td></tr><tr><td><code>HAS_ANY_FLAGS(bits, flags)</code></td><td><em>n/a</em></td><td>Evaluates to <code>true</code> if <code>bits</code> has any <code>flags</code> set</td></tr><tr><td><code>LED_FLAG_NONE</code></td><td><code>0x00</code></td><td>If this LED has no flags</td></tr><tr><td><code>LED_FLAG_ALL</code></td><td><code>0xFF</code></td><td>If this LED has all flags</td></tr><tr><td><code>LED_FLAG_MODIFIER</code></td><td><code>0x01</code></td><td>If the LED is on a modifier key</td></tr><tr><td><code>LED_FLAG_UNDERGLOW</code></td><td><code>0x02</code></td><td>If the LED is for underglow</td></tr><tr><td><code>LED_FLAG_KEYLIGHT</code></td><td><code>0x04</code></td><td>If the LED is for key backlight</td></tr><tr><td><code>LED_FLAG_INDICATOR</code></td><td><code>0x08</code></td><td>If the LED is for keyboard state indication</td></tr></tbody></table><h2 id="keycodes" tabindex="-1">Keycodes <a class="header-anchor" href="#keycodes" aria-label="Permalink to &quot;Keycodes {#keycodes}&quot;">​</a></h2><p>All RGB keycodes are currently shared with the RGBLIGHT system:</p><table><thead><tr><th>Key</th><th>Aliases</th><th>Description</th></tr></thead><tbody><tr><td><code>RGB_TOG</code></td><td></td><td>Toggle RGB lighting on or off</td></tr><tr><td><code>RGB_MODE_FORWARD</code></td><td><code>RGB_MOD</code></td><td>Cycle through modes, reverse direction when Shift is held</td></tr><tr><td><code>RGB_MODE_REVERSE</code></td><td><code>RGB_RMOD</code></td><td>Cycle through modes in reverse, forward direction when Shift is held</td></tr><tr><td><code>RGB_HUI</code></td><td></td><td>Increase hue, decrease hue when Shift is held</td></tr><tr><td><code>RGB_HUD</code></td><td></td><td>Decrease hue, increase hue when Shift is held</td></tr><tr><td><code>RGB_SAI</code></td><td></td><td>Increase saturation, decrease saturation when Shift is held</td></tr><tr><td><code>RGB_SAD</code></td><td></td><td>Decrease saturation, increase saturation when Shift is held</td></tr><tr><td><code>RGB_VAI</code></td><td></td><td>Increase value (brightness), decrease value when Shift is held</td></tr><tr><td><code>RGB_VAD</code></td><td></td><td>Decrease value (brightness), increase value when Shift is held</td></tr><tr><td><code>RGB_SPI</code></td><td></td><td>Increase effect speed (does not support eeprom yet), decrease speed when Shift is held</td></tr><tr><td><code>RGB_SPD</code></td><td></td><td>Decrease effect speed (does not support eeprom yet), increase speed when Shift is held</td></tr><tr><td><code>RGB_MODE_PLAIN</code></td><td><code>RGB_M_P</code></td><td>Static (no animation) mode</td></tr><tr><td><code>RGB_MODE_BREATHE</code></td><td><code>RGB_M_B</code></td><td>Breathing animation mode</td></tr><tr><td><code>RGB_MODE_RAINBOW</code></td><td><code>RGB_M_R</code></td><td>Full gradient scrolling left to right (uses the <code>RGB_MATRIX_CYCLE_LEFT_RIGHT</code> mode)</td></tr><tr><td><code>RGB_MODE_SWIRL</code></td><td><code>RGB_M_SW</code></td><td>Full gradient spinning pinwheel around center of keyboard (uses <code>RGB_MATRIX_CYCLE_PINWHEEL</code> mode)</td></tr></tbody></table><ul><li><code>RGB_MODE_*</code> keycodes will generally work, but not all of the modes are currently mapped to the correct effects for the RGB Matrix system.</li></ul><p><code>RGB_MODE_PLAIN</code>, <code>RGB_MODE_BREATHE</code>, <code>RGB_MODE_RAINBOW</code>, and <code>RGB_MODE_SWIRL</code> are the only ones that are mapped properly. The rest don&#39;t have a direct equivalent, and are not mapped.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>RGB_*</code> keycodes cannot be used with functions like <code>tap_code16(RGB_HUD)</code> as they&#39;re not USB HID keycodes. If you wish to replicate similar behaviour in custom code within your firmware (e.g. inside <code>encoder_update_user()</code> or <code>process_record_user()</code>), the equivalent <a href="#functions">RGB functions</a> should be used instead.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>By default, if you have both the <a href="./rgblight">RGB Light</a> and the RGB Matrix feature enabled, these keycodes will work for both features, at the same time. You can disable the keycode functionality by defining the <code>*_DISABLE_KEYCODES</code> option for the specific feature.</p></div><h2 id="rgb-matrix-effects" tabindex="-1">RGB Matrix Effects <a class="header-anchor" href="#rgb-matrix-effects" aria-label="Permalink to &quot;RGB Matrix Effects {#rgb-matrix-effects}&quot;">​</a></h2><p>All effects have been configured to support current configuration values (Hue, Saturation, Value, &amp; Speed) unless otherwise noted below. These are the effects that are currently available:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb_matrix_effects {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_NONE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_COLOR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Static single hue, no speed support</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_ALPHAS_MODS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Static dual hue, speed is hue for secondary hue</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_GRADIENT_UP_DOWN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Static gradient top to bottom, speed controls how much gradient changes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_GRADIENT_LEFT_RIGHT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Static gradient left to right, speed controls how much gradient changes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BREATHING,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // Single hue brightness cycling animation</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_SAT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Single hue band fading saturation scrolling left to right</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_VAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Single hue band fading brightness scrolling left to right</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_PINWHEEL_SAT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Single hue 3 blade spinning pinwheel fades saturation</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_PINWHEEL_VAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Single hue 3 blade spinning pinwheel fades brightness</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_SPIRAL_SAT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Single hue spinning spiral fades saturation</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_BAND_SPIRAL_VAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Single hue spinning spiral fades brightness</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_ALL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // Full keyboard solid hue cycling through full gradient</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_LEFT_RIGHT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Full gradient scrolling left to right</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_UP_DOWN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Full gradient scrolling top to bottom</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_OUT_IN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Full gradient scrolling out to in</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_OUT_IN_DUAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Full dual gradients scrolling out to in</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_RAINBOW_MOVING_CHEVRON,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Full gradient Chevron shapped scrolling left to right</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_PINWHEEL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Full gradient spinning pinwheel around center of keyboard</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_CYCLE_SPIRAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Full gradient spinning spiral around center of keyboard</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_DUAL_BEACON,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Full gradient spinning around center of keyboard</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_RAINBOW_BEACON,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Full tighter gradient spinning around center of keyboard</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_RAINBOW_PINWHEELS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Full dual gradients spinning two halfs of keyboard</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_FLOWER_BLOOMING,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Full tighter gradient of first half scrolling left to right and second half scrolling right to left</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_RAINDROPS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // Randomly changes a single key&#39;s hue</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_JELLYBEAN_RAINDROPS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Randomly changes a single key&#39;s hue and saturation</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_HUE_BREATHING,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Hue shifts up a slight ammount at the same time, then shifts back</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_HUE_PENDULUM,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Hue shifts up a slight ammount in a wave to the right, then back to the left</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_HUE_WAVE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Hue shifts up a slight ammount and then back down in a wave to the right</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_PIXEL_FRACTAL,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Single hue fractal filled keys pulsing horizontally out to edges</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_PIXEL_FLOW,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Pulsing RGB flow along LED wiring with random hues</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_PIXEL_RAIN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Randomly light keys with random hues</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_TYPING_HEATMAP,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // How hot is your WPM!</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_DIGITAL_RAIN,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // That famous computer simulation</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_SIMPLE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Pulses keys hit to hue &amp; value then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Static single hue, pulses keys hit to shifted hue then fades to current hue</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_WIDE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Hue &amp; value pulse near a single key hit then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hue &amp; value pulse near multiple key hits then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_CROSS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Hue &amp; value pulse the same column and row of a single key hit then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_MULTICROSS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Hue &amp; value pulse the same column and row of multiple key hits then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_NEXUS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Hue &amp; value pulse away on the same column and row of a single key hit then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Hue &amp; value pulse away on the same column and row of multiple key hits then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SPLASH,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Full gradient &amp; value pulse away from a single key hit then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_MULTISPLASH,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Full gradient &amp; value pulse away from multiple key hits then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_SPLASH,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Hue &amp; value pulse away from a single key hit then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_SOLID_MULTISPLASH,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Hue &amp; value pulse away from multiple key hits then fades value out</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_STARLIGHT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // LEDs turn on and off at random at varying brightness, maintaining user set color</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_STARLIGHT_DUAL_HUE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LEDs turn on and off at random at varying brightness, modifies user set hue by +- 30</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_STARLIGHT_DUAL_SAT,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LEDs turn on and off at random at varying brightness, modifies user set saturation by +- 30</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_RIVERFLOW,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // Modification to breathing animation, offset&#39;s animation depending on key location to simulate a river flowing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB_MATRIX_EFFECT_MAX</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>You can enable a single effect by defining <code>ENABLE_[EFFECT_NAME]</code> in your <code>config.h</code>:</p><table><thead><tr><th>Define</th><th>Description</th></tr></thead><tbody><tr><td><code>#define ENABLE_RGB_MATRIX_ALPHAS_MODS</code></td><td>Enables <code>RGB_MATRIX_ALPHAS_MODS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_GRADIENT_UP_DOWN</code></td><td>Enables <code>RGB_MATRIX_GRADIENT_UP_DOWN</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_GRADIENT_LEFT_RIGHT</code></td><td>Enables <code>RGB_MATRIX_GRADIENT_LEFT_RIGHT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BREATHING</code></td><td>Enables <code>RGB_MATRIX_BREATHING</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_SAT</code></td><td>Enables <code>RGB_MATRIX_BAND_SAT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_VAL</code></td><td>Enables <code>RGB_MATRIX_BAND_VAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_PINWHEEL_SAT</code></td><td>Enables <code>RGB_MATRIX_BAND_PINWHEEL_SAT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_PINWHEEL_VAL</code></td><td>Enables <code>RGB_MATRIX_BAND_PINWHEEL_VAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_SPIRAL_SAT</code></td><td>Enables <code>RGB_MATRIX_BAND_SPIRAL_SAT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_BAND_SPIRAL_VAL</code></td><td>Enables <code>RGB_MATRIX_BAND_SPIRAL_VAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_ALL</code></td><td>Enables <code>RGB_MATRIX_CYCLE_ALL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT</code></td><td>Enables <code>RGB_MATRIX_CYCLE_LEFT_RIGHT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_UP_DOWN</code></td><td>Enables <code>RGB_MATRIX_CYCLE_UP_DOWN</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON</code></td><td>Enables <code>RGB_MATRIX_RAINBOW_MOVING_CHEVRON</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_OUT_IN</code></td><td>Enables <code>RGB_MATRIX_CYCLE_OUT_IN</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL</code></td><td>Enables <code>RGB_MATRIX_CYCLE_OUT_IN_DUAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_PINWHEEL</code></td><td>Enables <code>RGB_MATRIX_CYCLE_PINWHEEL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_CYCLE_SPIRAL</code></td><td>Enables <code>RGB_MATRIX_CYCLE_SPIRAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_DUAL_BEACON</code></td><td>Enables <code>RGB_MATRIX_DUAL_BEACON</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_RAINBOW_BEACON</code></td><td>Enables <code>RGB_MATRIX_RAINBOW_BEACON</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_RAINBOW_PINWHEELS</code></td><td>Enables <code>RGB_MATRIX_RAINBOW_PINWHEELS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_FLOWER_BLOOMING</code></td><td>Enables <code>RGB_MATRIX_FLOWER_BLOOMING</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_RAINDROPS</code></td><td>Enables <code>RGB_MATRIX_RAINDROPS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS</code></td><td>Enables <code>RGB_MATRIX_JELLYBEAN_RAINDROPS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_HUE_BREATHING</code></td><td>Enables <code>RGB_MATRIX_HUE_BREATHING</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_HUE_PENDULUM</code></td><td>Enables <code>RGB_MATRIX_HUE_PENDULUM</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_HUE_WAVE</code></td><td>Enables <code>RGB_MATRIX_HUE_WAVE </code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_PIXEL_FRACTAL</code></td><td>Enables <code>RGB_MATRIX_PIXEL_FRACTAL</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_PIXEL_FLOW</code></td><td>Enables <code>RGB_MATRIX_PIXEL_FLOW</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_PIXEL_RAIN</code></td><td>Enables <code>RGB_MATRIX_PIXEL_RAIN</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_STARLIGHT</code></td><td>Enables <code>RGB_MATRIX_STARLIGHT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_STARLIGHT_DUAL_HUE</code></td><td>Enables <code>RGB_MATRIX_STARLIGHT_DUAL_HUE</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_STARLIGHT_DUAL_SAT</code></td><td>Enables <code>RGB_MATRIX_STARLIGHT_DUAL_SAT</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_RIVERFLOW</code></td><td>Enables <code>RGB_MATRIX_RIVERFLOW</code></td></tr></tbody></table><table><thead><tr><th>Framebuffer Defines</th><th>Description</th></tr></thead><tbody><tr><td><code>#define ENABLE_RGB_MATRIX_TYPING_HEATMAP</code></td><td>Enables <code>RGB_MATRIX_TYPING_HEATMAP</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_DIGITAL_RAIN</code></td><td>Enables <code>RGB_MATRIX_DIGITAL_RAIN</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>These modes introduce additional logic that can increase firmware size.</p></div><table><thead><tr><th>Reactive Defines</th><th>Description</th></tr></thead><tbody><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_SIMPLE</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_WIDE</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_CROSS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_MULTICROSS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_NEXUS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS</code></td><td>Enables <code>RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SPLASH</code></td><td>Enables <code>RGB_MATRIX_SPLASH</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_MULTISPLASH</code></td><td>Enables <code>RGB_MATRIX_MULTISPLASH</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_SPLASH</code></td><td>Enables <code>RGB_MATRIX_SOLID_SPLASH</code></td></tr><tr><td><code>#define ENABLE_RGB_MATRIX_SOLID_MULTISPLASH</code></td><td>Enables <code>RGB_MATRIX_SOLID_MULTISPLASH</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>These modes introduce additional logic that can increase firmware size.</p></div><h3 id="rgb-matrix-effect-typing-heatmap" tabindex="-1">RGB Matrix Effect Typing Heatmap <a class="header-anchor" href="#rgb-matrix-effect-typing-heatmap" aria-label="Permalink to &quot;RGB Matrix Effect Typing Heatmap {#rgb-matrix-effect-typing-heatmap}&quot;">​</a></h3><p>This effect will color the RGB matrix according to a heatmap of recently pressed keys. Whenever a key is pressed its &quot;temperature&quot; increases as well as that of its neighboring keys. The temperature of each key is then decreased automatically every 25 milliseconds by default.</p><p>In order to change the delay of temperature decrease define <code>RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span></code></pre></div><p>As heatmap uses the physical position of the leds set in the g_led_config, you may need to tweak the following options to get the best effect for your keyboard. Note the size of this grid is <code>224x64</code>.</p><p>Limit the distance the effect spreads to surrounding keys.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TYPING_HEATMAP_SPREAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40</span></span></code></pre></div><p>Limit how hot surrounding keys get from each press.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TYPING_HEATMAP_AREA_LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span></span></code></pre></div><p>Remove the spread effect entirely.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TYPING_HEATMAP_SLIM</span></span></code></pre></div><p>It&#39;s also possible to adjust the tempo of <em>heating up</em>. It&#39;s defined as the number of shades that are increased on the <a href="https://en.wikipedia.org/wiki/HSL_and_HSV" target="_blank" rel="noreferrer">HSV scale</a>. Decreasing this value increases the number of keystrokes needed to fully heat up the key.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TYPING_HEATMAP_INCREASE_STEP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span></span></code></pre></div><h3 id="rgb-matrix-effect-solid-reactive" tabindex="-1">RGB Matrix Effect Solid Reactive <a class="header-anchor" href="#rgb-matrix-effect-solid-reactive" aria-label="Permalink to &quot;RGB Matrix Effect Solid Reactive {#rgb-matrix-effect-solid-reactive}&quot;">​</a></h3><p>Solid reactive effects will pulse RGB light on key presses with user configurable hues. To enable gradient mode that will automatically change reactive color, add the following define:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_SOLID_REACTIVE_GRADIENT_MODE</span></span></code></pre></div><p>Gradient mode will loop through the color wheel hues over time and its duration can be controlled with the effect speed keycodes (<code>RGB_SPI</code>/<code>RGB_SPD</code>).</p><h2 id="custom-rgb-matrix-effects" tabindex="-1">Custom RGB Matrix Effects <a class="header-anchor" href="#custom-rgb-matrix-effects" aria-label="Permalink to &quot;Custom RGB Matrix Effects {#custom-rgb-matrix-effects}&quot;">​</a></h2><p>By setting <code>RGB_MATRIX_CUSTOM_USER = yes</code> in <code>rules.mk</code>, new effects can be defined directly from your keymap or userspace, without having to edit any QMK core files. To declare new effects, create a <code>rgb_matrix_user.inc</code> file in the user keymap directory or userspace folder.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Hardware maintainers who want to limit custom effects to a specific keyboard can create a <code>rgb_matrix_kb.inc</code> file in the root of the keyboard directory, and add <code>RGB_MATRIX_CUSTOM_KB = yes</code> to the keyboard level <code>rules.mk</code>.</p></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// !!! DO NOT ADD #pragma once !!! //</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Step 1.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declare custom effects using the RGB_MATRIX_EFFECT macro</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (note the lack of semicolon after the macro!)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB_MATRIX_EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_cool_effect)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB_MATRIX_EFFECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_cool_effect2)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Step 2.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define effects inside the `RGB_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_CUSTOM_EFFECT_IMPLS</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// e.g: A simple effect, self-contained within a single method</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_cool_effect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">effect_params_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  RGB_MATRIX_USE_LIMITS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led_min, led_max);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_check_finished_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led_max);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// e.g: A more complex effect, relying on external methods and state, with</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dedicated init and run methods</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some_global_state;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_cool_effect2_complex_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">effect_params_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_global_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_cool_effect2_complex_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">effect_params_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  RGB_MATRIX_USE_LIMITS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led_min, led_max);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, some_global_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_check_finished_leds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led_max);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_cool_effect2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">effect_params_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (params-&gt;init) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_cool_effect2_complex_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_cool_effect2_complex_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // RGB_MATRIX_CUSTOM_EFFECT_IMPLS</span></span></code></pre></div><p>To switch to your custom effect programmatically, simply call <code>rgb_matrix_mode()</code> and prepend <code>RGB_MATRIX_CUSTOM_</code> to the effect name you specified in <code>RGB_MATRIX_EFFECT()</code>. For example, an effect declared as <code>RGB_MATRIX_EFFECT(my_cool_effect)</code> would be referenced with:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rgb_matrix_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RGB_MATRIX_CUSTOM_my_cool_effect);</span></span></code></pre></div><p>For inspiration and examples, check out the built-in effects under <code>quantum/rgb_matrix/animations/</code>.</p><h2 id="colors" tabindex="-1">Colors <a class="header-anchor" href="#colors" aria-label="Permalink to &quot;Colors {#colors}&quot;">​</a></h2><p>These are shorthands to popular colors. The <code>RGB</code> ones can be passed to the <code>setrgb</code> functions, while the <code>HSV</code> ones to the <code>sethsv</code> functions.</p><table><thead><tr><th>RGB</th><th>HSV</th></tr></thead><tbody><tr><td><code>RGB_AZURE</code></td><td><code>HSV_AZURE</code></td></tr><tr><td><code>RGB_BLACK</code>/<code>RGB_OFF</code></td><td><code>HSV_BLACK</code>/<code>HSV_OFF</code></td></tr><tr><td><code>RGB_BLUE</code></td><td><code>HSV_BLUE</code></td></tr><tr><td><code>RGB_CHARTREUSE</code></td><td><code>HSV_CHARTREUSE</code></td></tr><tr><td><code>RGB_CORAL</code></td><td><code>HSV_CORAL</code></td></tr><tr><td><code>RGB_CYAN</code></td><td><code>HSV_CYAN</code></td></tr><tr><td><code>RGB_GOLD</code></td><td><code>HSV_GOLD</code></td></tr><tr><td><code>RGB_GOLDENROD</code></td><td><code>HSV_GOLDENROD</code></td></tr><tr><td><code>RGB_GREEN</code></td><td><code>HSV_GREEN</code></td></tr><tr><td><code>RGB_MAGENTA</code></td><td><code>HSV_MAGENTA</code></td></tr><tr><td><code>RGB_ORANGE</code></td><td><code>HSV_ORANGE</code></td></tr><tr><td><code>RGB_PINK</code></td><td><code>HSV_PINK</code></td></tr><tr><td><code>RGB_PURPLE</code></td><td><code>HSV_PURPLE</code></td></tr><tr><td><code>RGB_RED</code></td><td><code>HSV_RED</code></td></tr><tr><td><code>RGB_SPRINGGREEN</code></td><td><code>HSV_SPRINGGREEN</code></td></tr><tr><td><code>RGB_TEAL</code></td><td><code>HSV_TEAL</code></td></tr><tr><td><code>RGB_TURQUOISE</code></td><td><code>HSV_TURQUOISE</code></td></tr><tr><td><code>RGB_WHITE</code></td><td><code>HSV_WHITE</code></td></tr><tr><td><code>RGB_YELLOW</code></td><td><code>HSV_YELLOW</code></td></tr></tbody></table><p>These are defined in <a href="https://github.com/qmk/qmk_firmware/blob/master/quantum/color.h" target="_blank" rel="noreferrer"><code>color.h</code></a>. Feel free to add to this list!</p><h2 id="additional-configh-options" tabindex="-1">Additional <code>config.h</code> Options <a class="header-anchor" href="#additional-configh-options" aria-label="Permalink to &quot;Additional `config.h` Options {#additional-configh-options}&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_KEYRELEASES</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // reactive effects respond to keyreleases (instead of keypresses)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_TIMEOUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // number of milliseconds to wait until rgb automatically turns off</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_SLEEP</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // turn off effects when suspended</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_PROCESS_LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RGB_MATRIX_LED_COUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_LED_FLUSH_LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_MAXIMUM_BRIGHTNESS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // limits maximum brightness of LEDs to 200 out of 255. If not defined maximum brightness is set to 255</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default enabled state, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_MODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RGB_MATRIX_CYCLE_LEFT_RIGHT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default mode, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_HUE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default hue value, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_SAT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default saturation value, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_VAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RGB_MATRIX_MAXIMUM_BRIGHTNESS</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default brightness value, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_SPD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default animation speed, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DEFAULT_FLAGS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LED_FLAG_ALL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Sets the default LED flags, if none has been set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_DISABLE_KEYCODES</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // disables control of rgb matrix by keycodes (must use code functions to control the feature)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_MATRIX_SPLIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { X, Y }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	// (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              		// If reactive effects are enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB_TRIGGER_ON_KEYDOWN</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Triggers RGB keypress events on key down. This makes RGB control feel more responsive. This may cause RGB to not function properly on some boards</span></span></code></pre></div><h2 id="eeprom-storage" tabindex="-1">EEPROM storage <a class="header-anchor" href="#eeprom-storage" aria-label="Permalink to &quot;EEPROM storage {#eeprom-storage}&quot;">​</a></h2><p>The EEPROM for it is currently shared with the LED Matrix system (it&#39;s generally assumed only one feature would be used at a time).</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions {#functions}&quot;">​</a></h2><h3 id="direct-operation" tabindex="-1">Direct Operation <a class="header-anchor" href="#direct-operation" aria-label="Permalink to &quot;Direct Operation {#direct-operation}&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>rgb_matrix_set_color_all(r, g, b)</code></td><td>Set all of the LEDs to the given RGB value, where <code>r</code>/<code>g</code>/<code>b</code> are between 0 and 255 (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_set_color(index, r, g, b)</code></td><td>Set a single LED to the given RGB value, where <code>r</code>/<code>g</code>/<code>b</code> are between 0 and 255, and <code>index</code> is between 0 and <code>RGB_MATRIX_LED_COUNT</code> (not written to EEPROM)</td></tr></tbody></table><h3 id="disable-enable-effects" tabindex="-1">Disable/Enable Effects <a class="header-anchor" href="#disable-enable-effects" aria-label="Permalink to &quot;Disable/Enable Effects {#disable-enable-effects}&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>rgb_matrix_toggle()</code></td><td>Toggle effect range LEDs between on and off</td></tr><tr><td><code>rgb_matrix_toggle_noeeprom()</code></td><td>Toggle effect range LEDs between on and off (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_enable()</code></td><td>Turn effect range LEDs on, based on their previous state</td></tr><tr><td><code>rgb_matrix_enable_noeeprom()</code></td><td>Turn effect range LEDs on, based on their previous state (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_disable()</code></td><td>Turn effect range LEDs off, based on their previous state</td></tr><tr><td><code>rgb_matrix_disable_noeeprom()</code></td><td>Turn effect range LEDs off, based on their previous state (not written to EEPROM)</td></tr></tbody></table><h3 id="change-effect-mode" tabindex="-1">Change Effect Mode <a class="header-anchor" href="#change-effect-mode" aria-label="Permalink to &quot;Change Effect Mode {#change-effect-mode}&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>rgb_matrix_mode(mode)</code></td><td>Set the mode, if RGB animations are enabled</td></tr><tr><td><code>rgb_matrix_mode_noeeprom(mode)</code></td><td>Set the mode, if RGB animations are enabled (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_step()</code></td><td>Change the mode to the next RGB animation in the list of enabled RGB animations</td></tr><tr><td><code>rgb_matrix_step_noeeprom()</code></td><td>Change the mode to the next RGB animation in the list of enabled RGB animations (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_step_reverse()</code></td><td>Change the mode to the previous RGB animation in the list of enabled RGB animations</td></tr><tr><td><code>rgb_matrix_step_reverse_noeeprom()</code></td><td>Change the mode to the previous RGB animation in the list of enabled RGB animations (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_increase_speed()</code></td><td>Increase the speed of the animations</td></tr><tr><td><code>rgb_matrix_increase_speed_noeeprom()</code></td><td>Increase the speed of the animations (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_decrease_speed()</code></td><td>Decrease the speed of the animations</td></tr><tr><td><code>rgb_matrix_decrease_speed_noeeprom()</code></td><td>Decrease the speed of the animations (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_set_speed(speed)</code></td><td>Set the speed of the animations to the given value where <code>speed</code> is between 0 and 255</td></tr><tr><td><code>rgb_matrix_set_speed_noeeprom(speed)</code></td><td>Set the speed of the animations to the given value where <code>speed</code> is between 0 and 255 (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_reload_from_eeprom()</code></td><td>Reload the effect configuration (enabled, mode and color) from EEPROM</td></tr></tbody></table><h3 id="change-color" tabindex="-1">Change Color <a class="header-anchor" href="#change-color" aria-label="Permalink to &quot;Change Color {#change-color}&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>rgb_matrix_increase_hue()</code></td><td>Increase the hue for effect range LEDs. This wraps around at maximum hue</td></tr><tr><td><code>rgb_matrix_increase_hue_noeeprom()</code></td><td>Increase the hue for effect range LEDs. This wraps around at maximum hue (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_decrease_hue()</code></td><td>Decrease the hue for effect range LEDs. This wraps around at minimum hue</td></tr><tr><td><code>rgb_matrix_decrease_hue_noeeprom()</code></td><td>Decrease the hue for effect range LEDs. This wraps around at minimum hue (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_increase_sat()</code></td><td>Increase the saturation for effect range LEDs. This wraps around at maximum saturation</td></tr><tr><td><code>rgb_matrix_increase_sat_noeeprom()</code></td><td>Increase the saturation for effect range LEDs. This wraps around at maximum saturation (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_decrease_sat()</code></td><td>Decrease the saturation for effect range LEDs. This wraps around at minimum saturation</td></tr><tr><td><code>rgb_matrix_decrease_sat_noeeprom()</code></td><td>Decrease the saturation for effect range LEDs. This wraps around at minimum saturation (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_increase_val()</code></td><td>Increase the value for effect range LEDs. This wraps around at maximum value</td></tr><tr><td><code>rgb_matrix_increase_val_noeeprom()</code></td><td>Increase the value for effect range LEDs. This wraps around at maximum value (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_decrease_val()</code></td><td>Decrease the value for effect range LEDs. This wraps around at minimum value</td></tr><tr><td><code>rgb_matrix_decrease_val_noeeprom()</code></td><td>Decrease the value for effect range LEDs. This wraps around at minimum value (not written to EEPROM)</td></tr><tr><td><code>rgb_matrix_sethsv(h, s, v)</code></td><td>Set LEDs to the given HSV value where <code>h</code>/<code>s</code>/<code>v</code> are between 0 and 255</td></tr><tr><td><code>rgb_matrix_sethsv_noeeprom(h, s, v)</code></td><td>Set LEDs to the given HSV value where <code>h</code>/<code>s</code>/<code>v</code> are between 0 and 255 (not written to EEPROM)</td></tr></tbody></table><h3 id="query-current-status" tabindex="-1">Query Current Status <a class="header-anchor" href="#query-current-status" aria-label="Permalink to &quot;Query Current Status {#query-current-status}&quot;">​</a></h3><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>rgb_matrix_is_enabled()</code></td><td>Gets current on/off status</td></tr><tr><td><code>rgb_matrix_get_mode()</code></td><td>Gets current mode</td></tr><tr><td><code>rgb_matrix_get_hue()</code></td><td>Gets current hue</td></tr><tr><td><code>rgb_matrix_get_sat()</code></td><td>Gets current sat</td></tr><tr><td><code>rgb_matrix_get_val()</code></td><td>Gets current val</td></tr><tr><td><code>rgb_matrix_get_hsv()</code></td><td>Gets hue, sat, and val and returns a <a href="https://github.com/qmk/qmk_firmware/blob/7ba6456c0b2e041bb9f97dbed265c5b8b4b12192/quantum/color.h#L56-L61" target="_blank" rel="noreferrer"><code>HSV</code> structure</a></td></tr><tr><td><code>rgb_matrix_get_speed()</code></td><td>Gets current speed</td></tr><tr><td><code>rgb_matrix_get_suspend_state()</code></td><td>Gets current suspend state</td></tr></tbody></table><h2 id="callbacks" tabindex="-1">Callbacks <a class="header-anchor" href="#callbacks" aria-label="Permalink to &quot;Callbacks {#callbacks}&quot;">​</a></h2><h3 id="indicators" tabindex="-1">Indicators <a class="header-anchor" href="#indicators" aria-label="Permalink to &quot;Indicators {#indicators}&quot;">​</a></h3><p>If you want to set custom indicators, such as an LED for Caps Lock, or layer indication, then you can use the <code>rgb_matrix_indicators_kb</code> function on the keyboard level source file, or <code>rgb_matrix_indicators_user</code> function in the user <code>keymap.c</code>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_kb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rgb_matrix_indicators_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, red, green, blue);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In addition, there are the advanced indicator functions. These are aimed at those with heavily customized displays, where rendering every LED per cycle is expensive. Such as some of the &quot;drashna&quot; layouts. This includes a special macro to help make this easier to use: <code>RGB_MATRIX_INDICATOR_SET_COLOR(i, r, g, b)</code>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RGB_MATRIX_INDICATOR_SET_COLOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, red, green, blue);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="indicator-examples" tabindex="-1">Indicator Examples <a class="header-anchor" href="#indicator-examples" aria-label="Permalink to &quot;Indicator Examples {#indicator-examples}&quot;">​</a></h3><p>Caps Lock indicator on alphanumeric flagged keys:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">host_keyboard_led_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().caps_lock) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g_led_config.flags[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LED_FLAG_KEYLIGHT) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, RGB_RED);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Layer indicator on all keys:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_highest_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default_layer_state)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, RGB_BLUE);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, RGB_YELLOW);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Layer indicator only on keys with configured keycodes:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_highest_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer_state) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_highest_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer_state);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MATRIX_ROWS; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">row) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MATRIX_COLS; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g_led_config.matrix_co[row][col];</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NO_LED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                keymap_key_to_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keypos_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){col,row}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_TRNS) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, RGB_GREEN);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Split keyboards will require layer state data syncing with <code>#define SPLIT_LAYER_STATE_ENABLE</code>. See <a href="./split_keyboard#data-sync-options">Data Sync Options</a> for more details.</p></div><h4 id="indicator-examples-2" tabindex="-1">Examples <a class="header-anchor" href="#indicator-examples-2" aria-label="Permalink to &quot;Examples {#indicator-examples-2}&quot;">​</a></h4><p>This example sets the modifiers to be a specific color based on the layer state. You can use a switch case here, instead, if you would like. This uses HSV and then converts to RGB, because this allows the brightness to be limited (important when using the WS2812 driver).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HSV hsv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">layer_state_is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer_state, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hsv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hsv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hsv.v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_get_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hsv.v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_get_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RGB rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hsv_to_rgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hsv);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_min; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> led_max; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HAS_FLAGS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g_led_config.flags[i], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 0x01 == LED_FLAG_MODIFIER</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            rgb_matrix_set_color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, rgb.r, rgb.g, rgb.b);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If you want to indicate a Host LED status (caps lock, num lock, etc), you can use something like this to light up the caps lock key:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rgb_matrix_indicators_advanced_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> led_max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">host_keyboard_led_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().caps_lock) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        RGB_MATRIX_INDICATOR_SET_COLOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // assuming caps lock is at led #5</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        RGB_MATRIX_INDICATOR_SET_COLOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>RGB indicators on split keyboards will require state information synced to the slave half (e.g. <code>#define SPLIT_LAYER_STATE_ENABLE</code>). See <a href="./split_keyboard#data-sync-options">data sync options</a> for more details.</p></div><h4 id="indicators-without-rgb-matrix-effect" tabindex="-1">Indicators without RGB Matrix Effect <a class="header-anchor" href="#indicators-without-rgb-matrix-effect" aria-label="Permalink to &quot;Indicators without RGB Matrix Effect&quot;">​</a></h4><p>If you want to just use RGB indicators without RGB matrix effect, it is not possible to disable the latter because toggling RGB off will disable everything. You can workaround it with solid effect and colors off using this init function:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyboard_post_init_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rgb_matrix_mode_noeeprom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RGB_MATRIX_SOLID_COLOR);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rgb_matrix_sethsv_noeeprom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HSV_OFF);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>', 199);
const _hoisted_200 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_200);
}
const rgb_matrix = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  rgb_matrix as default
};
